---
- name: configure GTFS-RT converters/servers
  hosts: gtfs_rt_converter
  roles:
    - name: deploy NATS message queue
      become: true
      role: nats
      vars:
        nats_jetstream_enabled: true
        nats_jetstream_max_mem: 2G
        nats_jetstream_max_file: 10G

    - name: install Node.js from NodeSource's repo
      role: geerlingguy.nodejs
      vars:
        nodejs_version: '22.x'

    # todo: put StandardOutput=null in the [Service] section to disable logging?
    - name: install Caddy server
      role: caddy_ansible.caddy_ansible
      vars:
        caddy_packages:
          - 'github.com/mholt/caddy-ratelimit'
        caddy_systemd_capabilities_enabled: true
        caddy_config: "{{ lookup('template', '../templates/Caddyfile.j2') }}"

    - name: install PostgreSQL
      become: true
      role: geerlingguy.postgresql

  tasks:
    - name: set password of "postgres" user
      become: true
      ansible.builtin.shell: |
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD '{{ postgresql_postgres_password }}'"
    - name: install PostGIS
      package:
        name:
          - postgis

    - name: install Redis
      package:
        name:
          - redis
    - name: configure Redis to use at most {{ redis_maxmemory }} memory
      lineinfile:
        path: /etc/redis/redis.conf
        regex: ^(# *)?maxmemory\b
        line: maxmemory {{ redis_maxmemory }}
    - name: set Redis key eviction policy to {{ redis_maxmemory_policy }}
      lineinfile:
        path: /etc/redis/redis.conf
        regex: ^(# *)?maxmemory-policy\b
        line: maxmemory-policy {{ redis_maxmemory_policy }}

    - name: install Docker (required for GTFS Schedule import)
      ansible.builtin.apt:
        name: docker.io

    - name: clone OpenDataVBB/gtfs-rt-feed:{{ gtfs_rt_feed_git_ref }}
      ansible.builtin.git:
        repo: 'https://github.com/OpenDataVBB/gtfs-rt-feed.git'
        dest: '{{ gtfs_rt_feed_dir }}'
        version: '{{ gtfs_rt_feed_git_ref }}'
    - name: npm install
      community.general.npm:
        path: '{{ gtfs_rt_feed_dir }}'
    - name: put systemd gtfs-rt-feed.service unit file
      ansible.builtin.template:
        src: '../templates/gtfs-rt-feed.service.j2'
        dest: /etc/systemd/system/gtfs-rt-feed.service
    - name: validate gtfs-rt-feed.service
      ansible.builtin.shell: |
        systemd-analyze verify /etc/systemd/system/gtfs-rt-feed.service

    - name: create "{{ gtfs_rt_feed_gtfs_importer_db }}" database
      # todo: use community.postgresql.postgresql_db instead?
      # https://docs.ansible.com/ansible/10/collections/community/postgresql/postgresql_db_module.html
      ansible.builtin.shell: |
        # https://stackoverflow.com/a/18389184/1072129
        # https://dba.stackexchange.com/a/337470/289704
        # note the trailing spaces before the `\`
        echo "\
        SELECT 'CREATE DATABASE \"{{ gtfs_rt_feed_gtfs_importer_db }}\"' \
        WHERE NOT EXISTS (\
          SELECT FROM pg_database WHERE datname = '{{ gtfs_rt_feed_gtfs_importer_db }}'\
        )\
        \gexec" | sudo -u postgres psql
      become: true
    - name: run GTFS import manually
      ansible.builtin.shell: '{{ gtfs_rt_feed_import_cmd }}'

    # todo: use systemd unit, tie it to gtfs-rt-server.service? â€“ or configure rsyslog to keep cron logs
    # see also https://www.splendid-internet.de/blog/besser-als-cronjobs-timer-units-mit-systemd/#Und_was_sind_Timer_Units

    - name: set up GTFS import cron job
      ansible.builtin.cron:
        name: 'gtfs-rt-feed: GTFS import'
        user: root # todo: use `www-data` instead?
        cron_file: gtfs-rt-feed-gtfs-import
        job: '{{ gtfs_rt_feed_import_cmd }}'
        # every hour
        minute: '3'

    - name: systemd daemon-reload, enable & restart systemd gtfs-rt-feed.service
      ansible.builtin.systemd_service:
        daemon_reload: true
        enabled: true
        state: restarted
        name: gtfs-rt-feed
    - name: reload Caddy config
      ansible.builtin.systemd_service:
        state: reloaded
        name: caddy

    - name: clone OpenDataVBB/nats-consuming-gtfs-rt-server:{{ nats_consuming_gtfs_rt_server_git_ref }}
      ansible.builtin.git:
        repo: 'https://github.com/OpenDataVBB/nats-consuming-gtfs-rt-server.git'
        dest: /srv/nats-consuming-gtfs-rt-server
        version: '{{ nats_consuming_gtfs_rt_server_git_ref }}'
    - name: npm install
      community.general.npm:
        path: /srv/nats-consuming-gtfs-rt-server
    - name: put systemd nats-consuming-gtfs-rt-server.service unit file
      ansible.builtin.template:
        src: '../templates/nats-consuming-gtfs-rt-server.service.j2'
        dest: /etc/systemd/system/nats-consuming-gtfs-rt-server.service
    - name: validate nats-consuming-gtfs-rt-server.service
      ansible.builtin.shell: |
        systemd-analyze verify /etc/systemd/system/nats-consuming-gtfs-rt-server.service
    - name: systemd daemon-reload, enable & start systemd nats-consuming-gtfs-rt-server.service
      ansible.builtin.systemd_service:
        daemon_reload: true
        enabled: true
        state: restarted
        name: nats-consuming-gtfs-rt-server

    - name: put gtfs-rt.Caddyfile
      ansible.builtin.template:
        src: '../templates/gtfs-rt.Caddyfile.j2'
        dest: /etc/caddy/gtfs-rt.Caddyfile
        owner: 'www-data'
    - name: validate Caddy config
      ansible.builtin.shell: |
        caddy validate -c /etc/caddy/Caddyfile
    - name: reload Caddy config
      ansible.builtin.systemd_service:
        state: reloaded
        name: caddy

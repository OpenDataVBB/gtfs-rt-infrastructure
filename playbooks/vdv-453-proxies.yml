---
- name: configure VDV-453 proxies
  hosts: vdv_453_proxy
  roles:
    - name: install Node.js from NodeSource's repo
      role: geerlingguy.nodejs
      vars:
        nodejs_version: '22.x'
      become: true

    - name: install Prometheus blackbox exporter
      role: prometheus.prometheus.blackbox_exporter
      vars:
        blackbox_exporter_configuration_modules:
          ping_ipv4_5s:
            prober: icmp
            timeout: '5s'
            icmp:
              preferred_ip_protocol: 'ip4'
              ip_protocol_fallback: false
            # note: the target `{{ vdv_453_api_host }}` is specified via the Prometheus config
        # default is `0.0.0.0:9115`
        # todo: listen on Wireguard interface only?
        systemd_exporter_web_listen_address: '0.0.0.0:{{ prometheus_blackbox_export_port }}'

    - name: install Prometheus systemd exporter
      role: prometheus.prometheus.systemd_exporter
      vars:
        systemd_exporter_enable_restart_count: true
        # todo: listen on Wireguard interface only?
        # # default is `0.0.0.0:9558`
        # systemd_exporter_web_listen_address: '10.0.0.2:9558'
  tasks:
    - name: let UFW allow IPSec/IKEv2 connections on ens4 from {{ their_vpn_gateway_ip }}/32
      community.general.ufw:
        policy: allow
        direction: incoming
        interface: ens4
        name: IPSec
        from_ip: '{{ their_vpn_gateway_ip }}/32'
      become: true
    - name: let UFW allow IPSec/IKEv2 connections on ens4 to {{ their_vpn_gateway_ip }}/32
      community.general.ufw:
        policy: allow
        direction: outgoing
        interface: ens4
        name: IPSec
        to_ip: '{{ their_vpn_gateway_ip }}/32'
      become: true
    - name: let UFW allow VPN-internal traffic on ens4 from {{ vdv_453_api_host }}/32
      community.general.ufw:
        policy: allow
        direction: incoming
        interface: ens4
        from_ip: '{{ vdv_453_api_host }}/32'
      become: true
    - name: let UFW allow VPN-internal traffic on ens4 to {{ vdv_453_api_host }}/32
      community.general.ufw:
        policy: allow
        direction: outgoing
        interface: ens4
        to_ip: '{{ vdv_453_api_host }}/32'
      become: true
    - name: enable UFW
      community.general.ufw:
        state: enabled
      become: true

    - name: allow SSH reverse tunnels on non-loopback interfaces (for debugging the VBB DDS)
      when: inventory_hostname in groups["vdv_453_proxy_staging"]
      ansible.builtin.copy:
        src: '../lib/sshd-enable-gatewayports.conf'
        dest: /etc/ssh/sshd_config.d/enable-gatewayports.conf
      become: true
    - name: reload systemd ssh.service
      ansible.builtin.systemd_service:
        state: reloaded
        name: ssh
      become: true

    # install & configure StrongSwan IPSec VPN
    - name: install StrongSwan IPSec VPN
      ansible.builtin.apt:
        name:
          - strongswan
          - strongswan-swanctl
        # state: present
      become: true
    - name: assign VPN-internal IP address to network interface
      ansible.builtin.template:
        src: ../templates/netplan-hacon-datendrehscheibe-cisco-asa.yaml.j2
        dest: /etc/netplan/60-hacon-datendrehscheibe-cisco-asa.yaml
      become: true
    - name: netplan apply
      ansible.builtin.shell: netplan apply
      become: true

    - name: create directory /etc/systemd/system/strongswan-starter.service.d
      ansible.builtin.file:
        path: /etc/systemd/system/strongswan-starter.service.d
        state: directory
      become: true
    - name: patch strongswan-starter systemd service to load all connections & restart regularly
      ansible.builtin.copy:
        dest: /etc/systemd/system/strongswan-starter.service.d/override.conf
        content: |
          [Service]
          ExecStartPost=/bin/sh -c 'sleep 3; /usr/sbin/swanctl --load-all'
      become: true
    - name: validate strongswan-starter.service(.d)
      ansible.builtin.shell: |
        systemd-analyze verify /etc/systemd/system/strongswan-starter.service
    - name: create directory /etc/swanctl/conf.d
      ansible.builtin.file:
        path: /etc/swanctl/conf.d
        state: directory
      become: true
    - name: configure site-to-site VPN using StrongSwan
      ansible.builtin.template:
        src: ../templates/strongswan-hacon-datendrehscheibe-cisco-asa.conf.j2
        dest: /etc/swanctl/conf.d/hacon-datendrehscheibe-cisco-asa.conf
      become: true
    - name: systemd daemon-reload, enable & restart systemd strongswan-starter.service
      ansible.builtin.systemd_service:
        daemon_reload: true
        enabled: true
        state: restarted
        name: strongswan-starter
      become: true

    - name: check if HaCon Datendrehscheibe can be ping-ed
      ansible.builtin.shell: |
        ping -w3 -c1 -q "{{ vdv_453_api_host }}"

    - name: clone OpenDataVBB/vdv-453-nats-adapter:{{ vdv_453_nats_adapter_git_ref }}
      ansible.builtin.git:
        repo: 'https://github.com/OpenDataVBB/vdv-453-nats-adapter.git'
        dest: '{{ vdv_453_nats_adapter_dir }}'
        version: '{{ vdv_453_nats_adapter_git_ref }}'
      become: true
    - name: npm install
      community.general.npm:
        path: '{{ vdv_453_nats_adapter_dir }}'
      become: true
    - name: copy temporary wrapper script {{ vdv_453_nats_adapter_dir }}/run.sh
      ansible.builtin.copy:
        src: ../lib/vdv-453-nats-adapter-run.sh
        dest: '{{ vdv_453_nats_adapter_dir }}/run.sh'
        mode: 'u+x,g+x,o+x'
      become: true
    - name: put systemd vdv-453-nats-adapter.service unit file
      ansible.builtin.template:
        src: '../templates/vdv-453-nats-adapter.service.j2'
        dest: /etc/systemd/system/vdv-453-nats-adapter.service
      become: true
    - name: validate vdv-453-nats-adapter.service
      ansible.builtin.shell: |
        systemd-analyze verify /etc/systemd/system/vdv-453-nats-adapter.service
    - name: systemd daemon-reload, enable & restart systemd vdv-453-nats-adapter.service
      ansible.builtin.systemd_service:
        daemon_reload: true
        enabled: true
        state: restarted
        name: vdv-453-nats-adapter
      become: true

    # todo: timedatectl set-ntp true
    # todo: timedatectl set-timezone Europe/Berlin

# {{ ansible_managed }}

# https://kalnytskyi.com/posts/setup-cors-caddy-2/
(cors_for_all) {
		@cors_preflight method OPTIONS
		@cors header Origin *

		handle @cors_preflight {
				header Access-Control-Allow-Origin "*"
				header Access-Control-Allow-Methods "OPTIONS,HEAD,GET"
				header Access-Control-Allow-Headers "Cache-Control"
				# Firefox caps this at 24 hours (86400 seconds). […] Chromium (starting in v76) caps at 2 hours (7200 seconds). The default value is 5 seconds.
				header Access-Control-Max-Age "86400"
				respond "" 204
		}

		handle @cors {
				header Access-Control-Allow-Origin "*"
				header Access-Control-Allow-Methods "OPTIONS,HEAD,GET"
				header Access-Control-Allow-Headers "Cache-Control"
		}
}

{{ gtfs_rt_public_endpoints | join(', ') }} {
	encode zstd gzip

	route /data {
		uri strip_prefix /data

		# todo: higher rate limit for authenticated clients
		rate_limit {
			key {client_ip}
			events {{ gtfs_rt_rate_limit_requests }}
			window {{ gtfs_rt_rate_limit_window }}
		}

		import cors_for_all

		reverse_proxy {
			to http://localhost:{{ nats_consuming_gtfs_rt_server_internal_port }}
		}
	}

	route /* {
		file_server {
			root {{ gtfs_rt_webroot }}
		}
	}

	# Because we hash the client IP below, we copy it into a separate field, which we then mask below.
	log_append client_ip_masked {client_ip}
	log {
		format filter {
			fields {
				# > Strip 64 bits and you've identified a LAN subnet, not a user. Strip another 16 on top of that and y>
				# https://stackoverflow.com/a/6098698/1072129
				# > The IP-masking feature […] sets the last octet of IPv4 user IP addresses and the last 80 bits of IP>
				# https://web.archive.org/web/20250321012321/https://support.google.com/analytics/answer/2763052?hl=en
				client_ip_masked ip_mask 24 48 # keep bits: 18 with IPv4, 48 with IPv6

				request>remote_ip hash
				request>client_ip hash
			}
			wrap json
		}
		output file /var/log/caddy/gtfs-rt.log {
			roll_keep 1000
			roll_keep_for 365d
		}
	}
}
